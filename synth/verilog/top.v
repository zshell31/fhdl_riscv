/* Automatically generated by Ferrum HDL. */

// src/alu.rs: 44
module alu_impl_init
(
    // Inputs
    input wire [6:0] _instr$f7,
    input wire [4:0] _instr$rs2,
    input wire [4:0] _instr$rs1,
    input wire [2:0] _instr$f3,
    input wire [4:0] _instr$rd,
    input wire [6:0] _instr$code,
    input wire alu_zero,
    // Outputs
    output reg _c$pc_src,
    output reg _c$alu_src,
    output reg _c$wd_src,
    output reg _c$reg_write,
    output reg [2:0] _c$op
);

    // src/alu.rs: 45
    wire out;
    wire out_1;
    wire out_2;
    wire out_3;
    wire [2:0] out_4;
    assign out = 0;
    assign out_1 = 0;
    assign out_2 = 0;
    assign out_3 = 0;
    assign out_4 = 0;

    wire _$1;
    assign _$1 = 1;

    wire [2:0] _$2;
    assign _$2 = 1;

    wire [2:0] _$3;
    assign _$3 = 2;

    wire [2:0] _$4;
    assign _$4 = 3;

    wire [2:0] _$5;
    assign _$5 = 4;

    wire [16:0] _$6;
    assign _$6 = {
        _instr$f7,
        _instr$f3,
        _instr$code
    };

    // src/alu.rs: 49 (bb12)
    reg branch;
    reg cond_zero;
    always @(*) begin
        casez (_$6)
            { 7'd0, 3'd0, 7'd51 }: begin
                _c$alu_src = out_1;
                _c$wd_src = out_2;
                _c$reg_write = _$1;
                _c$op = out_4;
                branch = out;
                cond_zero = out;
            end
            { 7'd0, 3'd6, 7'd51 }: begin
                _c$alu_src = out_1;
                _c$wd_src = out_2;
                _c$reg_write = _$1;
                _c$op = _$2;
                branch = out;
                cond_zero = out;
            end
            { 7'd0, 3'd5, 7'd51 }: begin
                _c$alu_src = out_1;
                _c$wd_src = out_2;
                _c$reg_write = _$1;
                _c$op = _$3;
                branch = out;
                cond_zero = out;
            end
            { 7'd0, 3'd3, 7'd51 }: begin
                _c$alu_src = out_1;
                _c$wd_src = out_2;
                _c$reg_write = _$1;
                _c$op = _$4;
                branch = out;
                cond_zero = out;
            end
            { 7'd32, 3'd0, 7'd51 }: begin
                _c$alu_src = out_1;
                _c$wd_src = out_2;
                _c$reg_write = _$1;
                _c$op = _$5;
                branch = out;
                cond_zero = out;
            end
            { 7'd?, 3'd0, 7'd19 }: begin
                _c$alu_src = _$1;
                _c$wd_src = out_2;
                _c$reg_write = _$1;
                _c$op = out_4;
                branch = out;
                cond_zero = out;
            end
            { 7'd?, 3'd?, 7'd55 }: begin
                _c$alu_src = out_1;
                _c$wd_src = _$1;
                _c$reg_write = _$1;
                _c$op = out_4;
                branch = out;
                cond_zero = out;
            end
            { 7'd?, 3'd0, 7'd99 }: begin
                _c$alu_src = out_1;
                _c$wd_src = _$1;
                _c$reg_write = _$1;
                _c$op = _$5;
                branch = _$1;
                cond_zero = _$1;
            end
            { 7'd?, 3'd1, 7'd99 }: begin
                _c$alu_src = out_1;
                _c$wd_src = _$1;
                _c$reg_write = _$1;
                _c$op = _$5;
                branch = _$1;
                cond_zero = out;
            end
            default: begin
                _c$alu_src = out_1;
                _c$wd_src = out_2;
                _c$reg_write = out_3;
                _c$op = out_4;
                branch = out;
                cond_zero = out;
            end
        endcase
    end

    wire _$7;
    assign _$7 = alu_zero == cond_zero;

    // src/alu.rs: 104 (bb30)
    always @(*) begin
        case (branch)
            1'd0: _c$pc_src = out;
            default: _c$pc_src = _$7;
        endcase
    end

endmodule

