/* Automatically generated by Ferrum HDL. */

// src/alu.rs: 44
module alu_init
(
    // Inputs
    input wire [6:0] _instr$f7,
    input wire [4:0] _instr$rs2,
    input wire [4:0] _instr$rs1,
    input wire [2:0] _instr$f3,
    input wire [4:0] _instr$rd,
    input wire [6:0] _instr$code,
    input wire alu_zero,
    // Outputs
    output wire _c$pc_src,
    output reg _c$alu_src,
    output reg _c$wd_src,
    output reg _c$reg_write,
    output reg [2:0] _c$op
);

    wire out;
    wire out_1;
    wire out_2;
    wire out_3;
    wire [2:0] out_4;
    assign out = 0;
    assign out_1 = 0;
    assign out_2 = 0;
    assign out_3 = 0;
    assign out_4 = 0;

    wire _$1;
    assign _$1 = 1;

    wire [2:0] _$2;
    assign _$2 = 0;

    // src/alu.rs: 49
    reg _mux$pc_src;
    reg _mux$alu_src;
    reg _mux$wd_src;
    reg _mux$reg_write;
    reg [2:0] _mux$op;
    always @(*) begin
        case (_instr$code)
            7'd51: begin
                _mux$pc_src = out;
                _mux$alu_src = out_1;
                _mux$wd_src = out_2;
                _mux$reg_write = _$1;
                _mux$op = _$2;
            end
            default: begin
                _mux$pc_src = out;
                _mux$alu_src = out_1;
                _mux$wd_src = out_2;
                _mux$reg_write = out_3;
                _mux$op = out_4;
            end
        endcase
    end

    wire _$3;
    assign _$3 = 1;

    wire [2:0] _$4;
    assign _$4 = 1;

    // src/alu.rs: 49
    reg _mux$pc_src_1;
    reg _mux$alu_src_1;
    reg _mux$wd_src_1;
    reg _mux$reg_write_1;
    reg [2:0] _mux$op_1;
    always @(*) begin
        case (_instr$code)
            7'd51: begin
                _mux$pc_src_1 = out;
                _mux$alu_src_1 = out_1;
                _mux$wd_src_1 = out_2;
                _mux$reg_write_1 = _$3;
                _mux$op_1 = _$4;
            end
            default: begin
                _mux$pc_src_1 = out;
                _mux$alu_src_1 = out_1;
                _mux$wd_src_1 = out_2;
                _mux$reg_write_1 = out_3;
                _mux$op_1 = out_4;
            end
        endcase
    end

    // src/alu.rs: 49
    reg _mux$pc_src_2;
    reg _mux$alu_src_2;
    reg _mux$wd_src_2;
    reg _mux$reg_write_2;
    reg [2:0] _mux$op_2;
    always @(*) begin
        case (_instr$f3)
            3'd0: begin
                _mux$pc_src_2 = _mux$pc_src;
                _mux$alu_src_2 = _mux$alu_src;
                _mux$wd_src_2 = _mux$wd_src;
                _mux$reg_write_2 = _mux$reg_write;
                _mux$op_2 = _mux$op;
            end
            3'd6: begin
                _mux$pc_src_2 = _mux$pc_src_1;
                _mux$alu_src_2 = _mux$alu_src_1;
                _mux$wd_src_2 = _mux$wd_src_1;
                _mux$reg_write_2 = _mux$reg_write_1;
                _mux$op_2 = _mux$op_1;
            end
            default: begin
                _mux$pc_src_2 = out;
                _mux$alu_src_2 = out_1;
                _mux$wd_src_2 = out_2;
                _mux$reg_write_2 = out_3;
                _mux$op_2 = out_4;
            end
        endcase
    end

    // src/alu.rs: 49
    always @(*) begin
        case (_instr$f7)
            7'd0: begin
                _c$alu_src = _mux$alu_src_2;
                _c$wd_src = _mux$wd_src_2;
                _c$reg_write = _mux$reg_write_2;
                _c$op = _mux$op_2;
            end
            default: begin
                _c$alu_src = out_1;
                _c$wd_src = out_2;
                _c$reg_write = out_3;
                _c$op = out_4;
            end
        endcase
    end

    assign _c$pc_src = 0;

endmodule

